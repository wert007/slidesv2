// Global functions
lib(path: string) -> Library;
font(name: string) -> Font;
gfont(name: string) -> Font;

join(seperator: string, array: object[]) -> string;
utf32(codepoint: int) -> string;
utf32(str: string) -> int[];
contains(hay: string, needle: string) -> bool;
toTime(time: int) -> string;
fixedWidth(source: object, length: int) -> string;
float(i: int) -> float;
int(f: float) -> int;
mod(left: int, right: int) -> int;
min(a: int, b: int) -> int;
min(a: float, b: float) -> float;
min(a: Unit, b: Unit) -> Unit;
max(a: int, b: int) -> int;
max(a: float, b: float) -> int;
max(a: Unit, b: Unit) -> Unit;
csv(fileName: string) -> CSVFile;
stepBy(r: Range, step: int) -> Range;
video(fileName: string) -> VideoSource;
image(fileName: string) -> ImageSource;
crop(source: ImageSource, top: Unit, right: Unit, bottom: Unit, left: Unit) -> ImageSource;
youtube(video: string, quality: YouTubeQuality) -> YouTubePlayer;
println() -> void;
println(message: string) -> void;
print(message: string) -> void;
hsl(hue: int, sat: int, light: int) -> Color;
hsla(hue: int, sat: int, light: int, alpha: int) -> Color;
hex(hex: string) -> Color;
rgb(r: int, g: int, b: int) -> Color;
rgba(r: int, g: int, b: int, a: int) -> Color;
alpha(color: Color, alpha: float) -> Color;
identityMatrix(width: int, height: int) -> Matrix;
matrix(values: float[], width: int, height: int) -> Matrix;
px(value: float) -> Unit;
pt(value: float) -> Unit;
pct(value: float) -> Unit;
float(value: Unit) -> float;
border(width: Unit, style: BorderStyle, color: Color) -> BorderLine;


// Global thickness functions
toVertical(value: Unit) -> Unit;
toHorizontal(value: Unit) -> Unit;
padding(value: Unit) -> Thickness;
padding(vertical: Unit, horizontal: Unit) -> Thickness;
padding(top: Unit, right: Unit, bottom: Unit, left: Unit) -> Thickness;
margin(value: Unit) -> Thickness;
margin(vertical: Unit, horizontal: Unit) -> Thickness;
margin(top: Unit, right: Unit, bottom: Unit, left: Unit) -> Thickness;



// Global filter functions
flood(color: Color, opacity: float) -> SVGFilter;
turbulence(baseFrequency: float, numOctaves: int) -> SVGFilter;
pointLight(x: float, y: float, z: float) -> Light;
distantLight(azimuth: float, elevation: float) -> Light;
spotLight(x: float, y: float, z: float, pointAtX: float, pointAtY: float, pointAtZ: float, specularExponent: float, limitingConeAngle: float) -> Light;
diffuseLight(input: FilterInput, surfaceScale: float, diffuseConstant: float, child: Light) -> SVGFilter;
specularLight(input: FilterInput, surfaceScale: float, specularConstant: float, specularExponent: float, child: Light) -> SVGFilter;
blend(input1: FilterInput, input2: FilterInput, mode: BlendMode) -> SVGFilter;
convolve(input: FilterInput, matrix: Matrix) -> SVGFilter;
erode(input: FilterInput, radius: float) -> SVGFilter;
dilate(input: FilterInput, radius: float) -> SVGFilter;

linearNode(intercept: float) -> ComponentTransferFilterChild;
identityNode() -> ComponentTransferFilterChild;
gammaNode(amplitude: float, exponent: float, offset: float) -> ComponentTransferFilterChild;
tableNode(values: float[]) -> ComponentTransferFilterChild;
discreteNode(values: float[]) -> ComponentTransferFilterChild;
transfer(input: FilterInput, red: ComponentTransferFilterChild, green: ComponentTransferFilterChild, blue: ComponentTransferFilterChild, alpha: ComponentTransferFilterChild) -> SVGFilter;

blur(input: FilterInput, stdDeviation: float) -> SVGFilter;
saturate(input: FilterInput, value: float) -> SVGFilter;
colorMatrix(input: FilterInput, matrix: Matrix) -> SVGFilter;

blur(blurFactor: float) -> Filter;
brightness(value: float) -> Filter;
contrast(value: float) -> Filter;
grayscale(value: float) -> Filter;
invert(value: float) -> Filter;
opacity(value: float) -> Filter;
saturate(value: float) -> Filter;
sepia(value: float) -> Filter;
dropShadow(horizontal: int, vertical: int, blur: int, spread: int, color: Color) -> Filter;
hueRotate(value: float) -> Filter;		




// Global SVG functions
rect(width: Unit, height: Unit) -> UnitRect;
rect(topLeft: UnitPair, bottomRight: UnitPair) -> UnitRect;
line(p1: UnitPair, p2: UnitPair) -> UnitLine;
line(x1: Unit, y1: Unit, x2: Unit, y2: Unit) -> UnitLine;
path(m: string, width: int, height: int) -> Path;
arrow(direction: Direction, arrowLength: int, arrowWidth: int, baseWidthPercent: float, arrowHeadLengthPercent: float) -> Path;
intersectPaths(a: Path, b: Path) -> Path;		
unitePaths(a: Path, b: Path) -> Path;
differPaths(a: Path, b: Path) -> Path;
loadSVG(fileName: string) -> SVGTag;